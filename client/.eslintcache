[{"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\index.js":"1","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\App.js":"2","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\Header.js":"3","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\CardA.js":"4","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\Profile.js":"5","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\ProfHeader.js":"6","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\EmotionsForm.js":"7","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\mutations.js":"8","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\auth.js":"9","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\RecallMem.js":"10","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\queries.js":"11","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\FeelingList.js":"12","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\Feeling.js":"13","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\SignUp.js":"14","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\Login.js":"15"},{"size":258,"mtime":1655076674274,"results":"16","hashOfConfig":"17"},{"size":1728,"mtime":1655078981438,"results":"18","hashOfConfig":"17"},{"size":817,"mtime":1654827405541,"results":"19","hashOfConfig":"17"},{"size":1203,"mtime":1654563675592,"results":"20","hashOfConfig":"17"},{"size":1538,"mtime":1655079184230,"results":"21","hashOfConfig":"17"},{"size":777,"mtime":1654826723380,"results":"22","hashOfConfig":"17"},{"size":3810,"mtime":1655072843835,"results":"23","hashOfConfig":"17"},{"size":1467,"mtime":1654965544958,"results":"24","hashOfConfig":"17"},{"size":1094,"mtime":1655078719100,"results":"25","hashOfConfig":"17"},{"size":775,"mtime":1654826723381,"results":"26","hashOfConfig":"17"},{"size":1690,"mtime":1655077533354,"results":"27","hashOfConfig":"17"},{"size":2891,"mtime":1655073184765,"results":"28","hashOfConfig":"17"},{"size":1315,"mtime":1654975501072,"results":"29","hashOfConfig":"17"},{"size":2916,"mtime":1654828273093,"results":"30","hashOfConfig":"17"},{"size":2120,"mtime":1654828749918,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1bwim4f",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\index.js",[],["73","74"],"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\App.js",["75"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport Header from './components/Header';\r\nimport CardA from './components/CardA';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport SignUp from './pages/SignUp';\r\nimport Login from './pages/Login';\r\nimport Profile from './pages/Profile'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n// In our main App component, we are rendering only single instances of Header and Navbar and several instances of Card\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n\r\n      <Router>\r\n        <Header />\r\n        <Routes>\r\n          <Route\r\n            path='/'\r\n            element={<CardA />}\r\n\r\n          />\r\n\r\n          <Route\r\n            path='/SignUp'\r\n            element={<SignUp />}\r\n\r\n          />\r\n          <Route\r\n            path='/Login'\r\n            element={<Login />}\r\n\r\n          />\r\n          <Route\r\n            path='/Profile'\r\n            element={<Profile />}\r\n\r\n          />\r\n\r\n\r\n        </Routes>\r\n\r\n      </Router>\r\n\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/* <CardA \r\ntitle=\"title\"\r\ntext=\"blah\"\r\n/>\r\n<CardA \r\ntitle=\"title2\"\r\n/>\r\n<CardA \r\ntitle=\"title3\"\r\n/>  */","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\Header.js",["76","77","78"],"import React from 'react';\r\n// Here we are importing a CSS file as a dependency\r\nimport '../styles/Header.css';\r\nimport { Navbar, Container, Form, Nav, FormControl, Button } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Header() {\r\n  return (\r\n    <Navbar bg=\"Primary\" expand=\"lg\">\r\n  <Container fluid>\r\n    <Navbar.Brand href=\"#\">Emotional Memories Diary</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n    <Navbar.Collapse id=\"navbarScroll\">\r\n      <Nav\r\n        className=\"me-auto my-2 my-lg-0\"\r\n        style={{ maxHeight: '100px' }}\r\n        navbarScroll\r\n      >\r\n        <Link to={\"/SignUp\"}>Sign Up</Link> \r\n      \r\n        <Link to={\"/Login\"}>Login</Link>\r\n\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\CardA.js",["79","80"],"import React from 'react';\r\nimport { Card, ListGroup } from 'react-bootstrap';\r\nimport '../styles/Header.css';\r\n\r\n// We declare an object called styles that will contain a few objects for card and heading styles\r\n// Notice that each key lists CSS styles in camel case\r\nconst styles = {\r\n  card: {\r\n    margin: 20,\r\n    background: '#e8eaf6',\r\n  },\r\n  heading: {\r\n    background: '#3f51b5',\r\n    minHeight: 50,\r\n    lineHeight: 3.5,\r\n    fontSize: '1.2rem',\r\n    color: 'white',\r\n    padding: '0 20px',\r\n  },\r\n  content: {\r\n    padding: 20,\r\n  },\r\n};\r\n\r\n// In `Card`, we can assign a style from an object by using curly braces\r\n// We are assigning the card, heading, and content all from our `style` object\r\nfunction CardA(props) {\r\n  return (\r\n   \r\n<Card className=\"bg-dark text-white\">\r\n  <Card.Img src=\"https://d3d127vhjgkwcw.cloudfront.net/images/articles/2020_12/positive_mental_attitude_fb.jpg\" alt=\"Card image\" />\r\n  </Card>\r\n  \r\n\r\n\r\n      \r\n  );\r\n}\r\n\r\n\r\n\r\nexport default CardA;\r\n\r\n/* <Card border=\"danger\" style={{ width: '18rem' }}>\r\n<Card.Header>Header</Card.Header>\r\n<Card.Body>\r\n  <Card.Title>{props.title}</Card.Title>\r\n  <Card.Text>\r\n  {props.text}\r\n  </Card.Text>\r\n</Card.Body>\r\n</Card> */","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\Profile.js",[],"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\ProfHeader.js",["81","82","83"],"import React from 'react';\r\n// Here we are importing a CSS file as a dependency\r\nimport { Navbar, Container, Nav, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\nfunction ProfHeader() {\r\n  return (\r\n    <Navbar bg=\"primary\" expand=\"lg\">\r\n  <Container fluid>\r\n    <Navbar.Brand href=\"#\">Emotional Memories Diary</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n    <Navbar.Collapse id=\"navbarScroll\">\r\n      <Nav\r\n        className=\"me-auto my-2 my-lg-0\"\r\n        style={{ maxHeight: '100px' }}\r\n        navbarScroll\r\n      >\r\n        \r\n\r\n      </Nav>\r\n      <Nav>\r\n      <Nav.Link eventKey={2} href=\"#memes\">\r\n        Logout\r\n      </Nav.Link>\r\n    </Nav>\r\n     \r\n    </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>\r\n  );\r\n}\r\n\r\nexport default ProfHeader;","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\EmotionsForm.js",["84","85"],"import React, { useState } from 'react';\r\nimport {useMutation} from '@apollo/client'\r\nimport {ADD_MEMORY} from '../utils/mutations'\r\nimport {QUERY_MEMORIES, QUERY_ME} from '../utils/queries'\r\nimport Auth from '../utils/auth'\r\n\r\nfunction EmotionsForm(props) {\r\n  const [input, setInput] = useState('');\r\n  let [emotions, setEmotions] = useState('');\r\n\r\n  const emotionsLevel = ['Fear', 'Joy', 'Anger', 'Disgust', 'Sadness']\r\n\r\n  const [addMemory, {error}] = useMutation(ADD_MEMORY, {\r\n    update(cache, {data: {addMemory}}) {\r\n      try {\r\n        const {memories} = cache.readQuery({ query: QUERY_MEMORIES})\r\n        cache.writeQuery({\r\n          query: QUERY_MEMORIES,\r\n          data: {memories: [addMemory, ...memories]}\r\n        })\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n      const {me} = cache.readQuery({query: QUERY_ME});\r\n      cache.writeQuery({\r\n        query: QUERY_ME,\r\n        data: {me: {...me, memories: [...me.memories, addMemory]}}\r\n      })\r\n    }\r\n  })\r\n\r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault();\r\n\r\n    if (!emotions) {\r\n      emotions = 'Fear';\r\n    }\r\n    const {data} = await addMemory({\r\n      variables: {\r\n        memoryText: input,\r\n        emotion: emotions,\r\n        // date,\r\n        // keyword,\r\n        memoryOwner: Auth.getProfile().data.username\r\n      }\r\n    })\r\n    props.onSubmit({\r\n      id: Math.random(Math.floor() * 1000),\r\n      text: input,\r\n      emotions: emotions,\r\n    });\r\n\r\n    setInput('');\r\n    setEmotions('');\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\r\n  // If the prop \"edit\" exists, we know to render the update form instead\r\n  return !props.edit ? (\r\n    <div>\r\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add your emotions\"\r\n          value={input}\r\n          name=\"text\"\r\n          className=\"bucket-input\"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <div className=\"dropdown\">\r\n          <button className={`dropbtn ${emotions}`}>\r\n            {emotions || 'Main Feeling'}\r\n          </button>\r\n          <div className=\"dropdown-content\">\r\n            <p onClick={() => setEmotions(emotionsLevel[0])}>Fear</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[1])}>Joy</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[2])}>Anger</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[3])}>Disgust</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[4])}>Sadness</p>\r\n          </div>\r\n        </div>\r\n        <button className=\"bucket-button\">Add Emotion</button>\r\n      </form>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <h3>Update entry: {props.edit.value}</h3>\r\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={props.edit.value}\r\n          value={input}\r\n          name=\"text\"\r\n          className=\"bucket-input\"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <div className=\"dropdown\">\r\n          <button className={`dropbtn ${emotions}`}>\r\n            {emotions || 'Joy'}\r\n          </button>\r\n          <div className=\"dropdown-content\">\r\n            <p onClick={() => setEmotions(emotionsLevel[0])}>Fear</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[1])}>Joy</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[2])}>Anger</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[3])}>Disgust</p>\r\n            <p onClick={() => setEmotions(emotionsLevel[4])}>Sadness</p>\r\n          </div>\r\n        </div>\r\n        <button className=\"bucket-button\">Update</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmotionsForm;\r\n","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\mutations.js",[],"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\auth.js",[],"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\RecallMem.js",["86"],"// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport { Col } from 'react-bootstrap';\r\n// Here we are importing a CSS file as a dependency\r\n// import { Navbar, Container, Nav, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\nfunction RecallMem() {\r\n  return (\r\n    \r\n    <div>\r\n        <Col xs={7} md={{ span: 5, offset: 9 }}>\r\n      <form className=\"bucket-form mt-3\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a Keyword\"\r\n        //   value={input}\r\n          name=\"text\"\r\n          className=\"bucket-input\"\r\n        //   onChange={handleChange}\r\n        ></input>\r\n        <button className=\"bucket-button\">Recall Memory</button>\r\n      </form>\r\n      </Col>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default RecallMem;","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\utils\\queries.js",[],"C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\FeelingList.js",["87","88","89"],"import React, { useState } from 'react';\r\nimport EmotionsForm from './EmotionsForm';\r\nimport Feeling from './Feeling';\r\n// import {useQuery} from '@apollo/client'\r\n// import { QUERY_MEMORIES } from '../utils/queries';\r\n\r\nconst FeelingList = ({\r\n  memories,\r\n  title,\r\n  showTitle = true,\r\n\r\n\r\n}) => {\r\n  if (!memories.length){\r\n    return <h3>You don't have any memories recorded...</h3>\r\n  }\r\n  return (\r\n    <div>\r\n      {showTitle && <h3>{title}</h3>}\r\n      {memories && memories.map((memory) => {\r\n        <Feeling\r\n        feeling={memory}/>\r\n      })}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n// function FeelingList() {\r\n//   const [feeling, setFeeling] = useState([]);\r\n\r\n//   // Function to add a feeling list item\r\n//   const addFeelingItem = (item) => {\r\n//     console.log(\r\n//       '🚀 ~ file: feelingList.js ~ line 10 ~ addfeelingItem ~ item',\r\n//       item\r\n//     );\r\n//     // Check to see if the item text is empty\r\n//     if (!item.text) {\r\n//       return;\r\n//     }\r\n\r\n//     // Add the new feeling list item to the existing array of objects\r\n//     const newFeeling = [item, ...feeling];\r\n//     console.log(newFeeling);\r\n\r\n//     // Call setfeeling to update state with our new set of feeling list items\r\n//     setFeeling(newFeeling);\r\n//   };\r\n\r\n//   // Function to mark feeling list item as complete\r\n//   const completeFeelingItem = (id) => {\r\n//     // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\r\n//     let updatedFeeling = feeling.map((item) => {\r\n//       if (item.id === id) {\r\n//         item.isComplete = !item.isComplete;\r\n//       }\r\n//       return item;\r\n//     });\r\n\r\n//     console.log(updatedFeeling);\r\n//     setFeeling(updatedFeeling);\r\n//   };\r\n\r\n//   // Function to remove feeling list item and update state\r\n//   const removeFeelingItem = (id) => {\r\n//     const updatedFeeling = [...feeling].filter((item) => item.id !== id);\r\n\r\n//     setFeeling(updatedFeeling);\r\n//   };\r\n\r\n//   // Function to edit the feeling list item\r\n//   const editFeelingItem = (itemId, newValue) => {\r\n//     // Make sure that the value isn't empty\r\n//     if (!newValue.text) {\r\n//       return;\r\n//     }\r\n\r\n//     // We use the \"prev\" argument provided with the useState hook to map through our list of items\r\n//     // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\r\n//     setFeeling((prev) =>\r\n//       prev.map((item) => (item.id === itemId ? newValue : item))\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <EmotionsForm onSubmit={addFeelingItem} />\r\n//       <Feeling\r\n//         feeling={feeling}\r\n//         completeFeelingItem={completeFeelingItem}\r\n//         removeFeelingItem={removeFeelingItem}\r\n//         editFeelingItem={editFeelingItem}\r\n//       ></Feeling>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default FeelingList;\r\n","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\components\\Feeling.js",["90","91","92","93","94"],"import React, { useState } from 'react';\r\nimport EmotionsForm from './EmotionsForm';\r\nimport {useParams} from 'react-router-dom'\r\nimport {useQuery} from '@apollo/client'\r\nimport {QUERY_ONE_MEMORY, QUERY_USER, QUERY_ME} from '../utils/queries'\r\n\r\n// const Feeling = ({memory})=>{\r\n\r\n\r\nfunction Feeling(props) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: '',\r\n    emotions: '',\r\n  });\r\n\r\n  console.log(props.feeling);\r\n\r\n  const submitUpdate = (value) => {\r\n    props.editFeelingItem(edit.id, value);\r\n    setEdit({ id: null, value: '', emotions: '' });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <EmotionsForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return props.feeling.map((item, i) => (\r\n    <div\r\n      className={\r\n        item.isComplete\r\n          ? `feeling-row complete ${item.emotions}`\r\n          : `feeling-row ${item.emotions}`\r\n      }\r\n      key={i}\r\n    >\r\n      <div key={item.id} onClick={() => props.completeFeelingItem(item.id)}>\r\n        {item.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        {console.log(item)}\r\n        <p onClick={() => setEdit({ id: item.id, value: item.text, emotions: item.emotions })}> ✏️</p>\r\n        <p onClick={() => props.removeFeelingItem(item.id)}> 🗑️</p>\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Feeling;","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\SignUp.js",["95","96","97"],"import React, {useState} from 'react';\r\nimport { Col, Row, Form, Button } from 'react-bootstrap';\r\nimport {useMutation} from '@apollo/client'\r\nimport {ADD_USER} from '../utils/mutations'\r\nimport Auth from '../utils/auth'\r\n\r\n\r\nconst styles = {\r\n  rectangleShape: {\r\n    background: '#9a74db',\r\n    minHeight: 50,\r\n    lineHeight: 3.5,\r\n    fontSize: '1.2rem',\r\n    color: 'white',\r\n    padding: '0px 10px',\r\n  \r\n  },\r\n};\r\n\r\n\r\n\r\nconst SignUp = () => {\r\n  const [formState, setFormState] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\nreturn (\r\n<div style={styles.rectangleShape}>\r\n<Form className=\"mt-5\" onSubmit={handleFormSubmit}>\r\n  <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n    <Form.Group as={Col} controlId=\"formGridFirstName\">\r\n      <Form.Label>First Name</Form.Label>\r\n      <Form.Control type=\"text\" name=\"firstName\" placeholder=\"Enter First Name\" value={formState.firstName} onChange={handleChange} />\r\n    </Form.Group>\r\n    </Col>\r\n    \r\n    <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n    <Form.Group as={Col} controlId=\"formGridLastName\">\r\n      <Form.Label>Last Name</Form.Label>\r\n      <Form.Control type=\"text\" name=\"lastName\" placeholder=\"Enter Last Name\" value={formState.lastName}  onChange={handleChange}/>\r\n    </Form.Group>\r\n    </Col>\r\n    \r\n    <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n  <Form.Group className=\"mb-3\" controlId=\"formGridEmail\">\r\n    <Form.Label>Email</Form.Label>\r\n    <Form.Control type= \"email\" name=\"email\"placeholder=\"Email\" value={formState.email} onChange={handleChange}/>\r\n  </Form.Group>\r\n  </Col>\r\n  <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n  <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\r\n    <Form.Label>Username</Form.Label>\r\n    <Form.Control type=\"text\" name=\"username\" placeholder=\"Username\" value={formState.username} onChange={handleChange}/>\r\n  </Form.Group>\r\n  </Col>\r\n  <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n  <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\r\n    <Form.Label>Password</Form.Label>\r\n    <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" value={formState.password} onChange={handleChange}/>\r\n  </Form.Group>\r\n  </Col>\r\n  <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n  </Col>\r\n</Form>\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\n};\r\n\r\nexport default SignUp;","C:\\Users\\teent\\OneDrive\\Desktop\\Other People's Repos\\MemoryBank\\client\\src\\pages\\Login.js",["98","99","100"],"import React, {useState} from 'react';\r\nimport { Col, Row, Form, Button } from 'react-bootstrap';\r\nimport {useMutation} from '@apollo/client'\r\nimport {LOGIN_USER} from '../utils/mutations'\r\n\r\nimport Auth from '../utils/auth'\r\n\r\nconst styles = {\r\n  rectangleShape: {\r\n  background: '#9a74db',\r\n  minHeight: 50,\r\n  lineHeight: 3.5,\r\n  fontSize: '1.2rem',\r\n  color: 'white',\r\n  padding: '0px 10px',\r\n  \r\n  },\r\n};\r\n\r\n\r\nconst Login = (props) => {\r\n  const [formState, setFormState] = useState({ username: '', password: '' });\r\n  const [login, { error, data }] = useMutation(LOGIN_USER);\r\n\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      username: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\nreturn (\r\n<div style={styles.rectangleShape}>\r\n<Form className=\"mt-5\" onSubmit ={handleFormSubmit}>\r\n    <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n        <Form.Group className=\"mb-3\" controlId=\"formGroupUsername\">\r\n    <Form.Label>Username</Form.Label>\r\n    <Form.Control type=\"text\" name=\"username\" placeholder=\"Enter Username\" value={formState.username} onChange={handleChange} />\r\n  </Form.Group>\r\n    </Col>\r\n    <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n       <Form.Group className=\"mb-3\" controlId=\"formGroupPassword\">\r\n    <Form.Label>Password</Form.Label>\r\n    <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" value={formState.password} onChange={handleChange} />\r\n  </Form.Group>\r\n    </Col>\r\n    <Col xs={7} md={{ span: 4, offset: 4 }}>\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n  </Col>\r\n  \r\n</Form>\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\n};\r\n\r\nexport default Login;",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":18},{"ruleId":"105","severity":1,"message":"109","line":4,"column":29,"nodeType":"107","messageId":"108","endLine":4,"endColumn":33},{"ruleId":"105","severity":1,"message":"110","line":4,"column":40,"nodeType":"107","messageId":"108","endLine":4,"endColumn":51},{"ruleId":"105","severity":1,"message":"111","line":4,"column":53,"nodeType":"107","messageId":"108","endLine":4,"endColumn":59},{"ruleId":"105","severity":1,"message":"112","line":2,"column":16,"nodeType":"107","messageId":"108","endLine":2,"endColumn":25},{"ruleId":"105","severity":1,"message":"113","line":7,"column":7,"nodeType":"107","messageId":"108","endLine":7,"endColumn":13},{"ruleId":"105","severity":1,"message":"109","line":3,"column":34,"nodeType":"107","messageId":"108","endLine":3,"endColumn":38},{"ruleId":"105","severity":1,"message":"110","line":3,"column":40,"nodeType":"107","messageId":"108","endLine":3,"endColumn":51},{"ruleId":"105","severity":1,"message":"111","line":3,"column":53,"nodeType":"107","messageId":"108","endLine":3,"endColumn":59},{"ruleId":"105","severity":1,"message":"114","line":13,"column":22,"nodeType":"107","messageId":"108","endLine":13,"endColumn":27},{"ruleId":"105","severity":1,"message":"115","line":38,"column":12,"nodeType":"107","messageId":"108","endLine":38,"endColumn":16},{"ruleId":"105","severity":1,"message":"106","line":2,"column":17,"nodeType":"107","messageId":"108","endLine":2,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"116","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":20,"column":42,"nodeType":"119","messageId":"120","endLine":20,"endColumn":44},{"ruleId":"105","severity":1,"message":"121","line":3,"column":9,"nodeType":"107","messageId":"108","endLine":3,"endColumn":18},{"ruleId":"105","severity":1,"message":"122","line":4,"column":9,"nodeType":"107","messageId":"108","endLine":4,"endColumn":17},{"ruleId":"105","severity":1,"message":"123","line":5,"column":9,"nodeType":"107","messageId":"108","endLine":5,"endColumn":25},{"ruleId":"105","severity":1,"message":"124","line":5,"column":27,"nodeType":"107","messageId":"108","endLine":5,"endColumn":37},{"ruleId":"105","severity":1,"message":"125","line":5,"column":39,"nodeType":"107","messageId":"108","endLine":5,"endColumn":47},{"ruleId":"105","severity":1,"message":"126","line":2,"column":15,"nodeType":"107","messageId":"108","endLine":2,"endColumn":18},{"ruleId":"105","severity":1,"message":"114","line":30,"column":21,"nodeType":"107","messageId":"108","endLine":30,"endColumn":26},{"ruleId":"105","severity":1,"message":"115","line":30,"column":28,"nodeType":"107","messageId":"108","endLine":30,"endColumn":32},{"ruleId":"105","severity":1,"message":"126","line":2,"column":15,"nodeType":"107","messageId":"108","endLine":2,"endColumn":18},{"ruleId":"105","severity":1,"message":"114","line":23,"column":19,"nodeType":"107","messageId":"108","endLine":23,"endColumn":24},{"ruleId":"105","severity":1,"message":"115","line":23,"column":26,"nodeType":"107","messageId":"108","endLine":23,"endColumn":30},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'ListGroup' is defined but never used.","'styles' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'EmotionsForm' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useParams' is defined but never used.","'useQuery' is defined but never used.","'QUERY_ONE_MEMORY' is defined but never used.","'QUERY_USER' is defined but never used.","'QUERY_ME' is defined but never used.","'Row' is defined but never used.","no-global-assign","no-unsafe-negation"]